import{_ as s,v as a,b as n,R as l}from"./chunks/framework.1a271518.js";const d=JSON.parse('{"title":"变更检查机制","description":"","frontmatter":{},"headers":[],"relativePath":"blog/vue/v3/change-detection.md","filePath":"blog/vue/v3/change-detection.md","lastUpdated":1692010672000}'),e={name:"blog/vue/v3/change-detection.md"},o=l(`<h1 id="变更检查机制" tabindex="-1">变更检查机制 <a class="header-anchor" href="#变更检查机制" aria-label="Permalink to &quot;变更检查机制&quot;">​</a></h1><h2 id="检查流程" tabindex="-1">检查流程 <a class="header-anchor" href="#检查流程" aria-label="Permalink to &quot;检查流程&quot;">​</a></h2><ol><li>对响应式数据进行变更操作（赋值，数组操作等）触发变更检查</li><li>在“next tick”更新周期中缓冲所有状态的修改（异步更新）（批处理）</li><li>依赖该响应式数据的组件进入 rerender ，生成新的 vnode 与它旧的 vnode 进行 diff（依赖追踪）（精确到具体组件）</li><li>将必要的更新应用到真实 DOM</li></ol><h2 id="批处理" tabindex="-1">批处理 <a class="header-anchor" href="#批处理" aria-label="Permalink to &quot;批处理&quot;">​</a></h2><h3 id="js-事件循环机制" tabindex="-1">js 事件循环机制 <a class="header-anchor" href="#js-事件循环机制" aria-label="Permalink to &quot;js 事件循环机制&quot;">​</a></h3><p>同步代码执行，遇到异步任务则推入异步任务队列（宏任务队列，微任务队列），当前调用栈为空，js 引擎从异步任务队列以微任务优先（可插队）及先进先出的规则取出异步任务并按同步代码执行，以此循环往复</p><h3 id="流程" tabindex="-1">流程 <a class="header-anchor" href="#流程" aria-label="Permalink to &quot;流程&quot;">​</a></h3><p>当响应式数据变化后，vue 为本次更新创建一个缓冲队列和一个回调队列，并创建一个处理本次更新的异步任务（浏览器支持创建微任务则为微任务，否则降级为宏任务）后续在当前调用栈下多次对响应式数据进行变更操作，都将推入本次更新的缓冲队列中，后续在当前调用栈下通过 nextTick 注入的回调，都将推入本次更新的回调队列中；处理本次更新的异步任务何时执行交给事件循环机制调度；</p><h2 id="响应式系统" tabindex="-1">响应式系统 <a class="header-anchor" href="#响应式系统" aria-label="Permalink to &quot;响应式系统&quot;">​</a></h2><p>Vue 3 使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">Proxy</a> 来创建响应式对象，仅将 getter / setter 用于 ref</p><h2 id="响应式数据创建" tabindex="-1">响应式数据创建 <a class="header-anchor" href="#响应式数据创建" aria-label="Permalink to &quot;响应式数据创建&quot;">​</a></h2><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reactive</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 原始类型</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> msg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 引用类型</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">([])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="依赖追踪" tabindex="-1">依赖追踪 <a class="header-anchor" href="#依赖追踪" aria-label="Permalink to &quot;依赖追踪&quot;">​</a></h2><p>组件挂载时，会追踪其中所用到的所有响应式依赖</p>`,14),t=[o];function p(r,c,i,D,y,F){return a(),n("div",null,t)}const A=s(e,[["render",p]]);export{d as __pageData,A as default};
